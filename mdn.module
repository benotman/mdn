<?php
/**
 * @file
 * A block module that displays the multi diagram navigation widget.
 
 /**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function mdn_help($path, $arg) {
  switch ($path) {
    case "admin/help#mdn":
      return '<p>' . t("Widget to show diagrams") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function mdn_block_info() {
  $blocks['mdn'] = array(
    // The name that will appear in the block list.
    'info' => t('mdn'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
    $blocks['mdnNodeViewer'] = array(
    // The name that will appear in the block list.
    'info' => t('mdnNodeViewer'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

function mdn_block_view($delta = '') {
  switch ($delta) {
    case 'mdn':
      $block['subject'] = t('mdn');
      if (user_access('access content')) {
       $block['content'] = get_mdn(); //"<div id='mdn'><p>Test block</p></div>";
      }
      break;
	  
    case 'mdnNodeViewer':
      $block['subject'] = t('mdn Node Viewer');
      if (user_access('access content')) {
       $block['content'] = "<div id='mdnNodeViewer'><p>default node will be displayed</p></div>"; //"<div id='mdn'><p>Test block</p></div>";
	  }
	  break;
 }
 return $block;
}

function get_and_prepare_diagram($node){
	 
	  $fid = $node->field_svg_file[LANGUAGE_NONE][0]['fid'];
	  $file = file_load($fid);
      $contents = file_get_contents($file->uri);
      $doc = new DOMDocument();
      $doc->loadXML($contents);

	  $rootNode = $doc->documentElement;
      $rootNode->setAttribute("hide_elements",$node->field_hide_svg_elements[LANGUAGE_NONE][0]['value']); // try to use drupal_add_js settings instead
	  
      $prepared='';
	  $prepared = $rootNode->getAttribute("prepared");

	  if($prepared === ''){ // SVG file is loaded for the first time, MDN prepares svg file by assigning unique ids for the svg file and all elements

	    // The following 5 line no longer needed, code is included in mdnjs file
        //  $scriptNode = $doc->createElement("script");
        //  $rootNode->appendChild($scriptNode);
	     // $svg_js = file_get_contents(drupal_get_path('module', 'mdn') . '/SVGjs2.js'); 
	     // $cdata = $doc->createCDATASection($svg_js);
		 // $scriptNode->appendChild($cdata);
 		
		  $uniqueId = get_unique_svg_number();
		  //$svgId = 'svg' . $uniqueId; // commented for testing, uncomment for final version 
		 // $rootNode->setAttribute("id", $svgId);
          $svgId = $rootNode->getAttribute("id"); // remove in final version

		  $rootNode->setAttribute("prepared", 'yes');
          
		  $elem_count =1;
          $elems = $doc->getElementsByTagName('path');
          foreach ($elems as $elem) {
			 $elem_id =  $elem->getAttribute("id"); 
			 if($elem_id != '') 
                $elem->setAttribute("id", $svgId . '_' . $elem_id);
             else	 
		        $elem->setAttribute("id", $svgId . '_' . $elem_count);
			
	         $elem_count++;
          }
		  
          $elems = $doc->getElementsByTagName('ellipse');
          foreach ($elems as $elem) {
			 $elem_id =  $elem->getAttribute("id");
			 if($elem_id != '') 
                $elem->setAttribute("id", $svgId . '_' . $elem_id);
             else	 
		        $elem->setAttribute("id", $svgId . '_' . $elem_count);

	         $elem_count++;
          }
		  
		  $newContents = $doc->saveXML();
		  // Commented for testing, uncomment for final version
          file_put_contents($file->uri, $newContents);
		  
      }
	  else{ // svg file is prepared before
		  $newContents = $doc->saveXML(); 
	  }

	  return $newContents;
}

function get_mdn() {

  drupal_add_js(drupal_get_path('module', 'mdn') . '/mdnjs.js');
  drupal_add_js(drupal_get_path('module', 'mdn') . '/jquery.simplemodal.1.4.4.min.js');
  drupal_add_css(drupal_get_path('module', 'mdn') . '/mdn.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
 
  $default_layout = 2; // default number of diagrams to display

  $resultHtml='<div id="mdnContainer">'  
                .'<div id="mdnButtonContainer">'
                   . '<button type="submit" value="Submit" class="mdnButton" onClick="clearSelections();">Clear Selections</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="fullScreen();">Full Screen</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="displayDiagramBrowser();">Select Diagrams</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="relatedContent();">Related Content</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="userData();">userData</button>'
			    .'</div>'
			    .'<div id="AllSVGContainer">';
   
  $diagramBrowser = '<div id="diagramBrowser" style="display:none">'
                       . '<div id="diagramBrowserButtons">' 
					      . '<p id="diagramBrowserComment">Select/Deselect diagrams to view in the main page</p>'
					      . '<button id="diagramBrowserOK" type="submit" value="Submit" class="mdnButton" onClick="DiagramBrowserOK();">OK</button>'
					      . '<button id="diagramBrowserCancel" type="submit" value="Submit" class="mdnButton" onClick="DiagramBrowserCancel();">Cancel</button>'
					    .'</div>';

   $diagramCounter=0;  
   $layoutCounter =0; // counting diagrams with displayonLoad = true (will be under 2)   
						
   $query = new EntityFieldQuery();
   $query->entityCondition('entity_type', 'node')
	 ->entityCondition('bundle', 'diagram');                    
	// ->fieldCondition('field_display_on_load', 'value', 1, '=');
	// ->fieldOrderBy('field_display_on_load', 'entity_id', 'ASC'); check this to load the first few diagrams 
    
   $result = $query->execute();
   if (empty($result['node'])) {  // No diagrams found
	   //	return '<p>No diagrams found</p>';
		$resultHtml= $resultHtml .  '<div class="svgContainer mdnMediumScreen"></div>';
		$resultHtml= $resultHtml .  '<div class="svgContainer mdnMediumScreen"></div>';
   }
   else{
	  $nodes = entity_load('node', array_keys($result['node']));
       // $res = print_r($nodes, true);
      $aa='';
      foreach ($nodes as $node) {
	     $fidThumbnail = $node->field_thumbnail[LANGUAGE_NONE][0]['fid'];
	     //$hide_elements = $node->field_hide_svg_elements[LANGUAGE_NONE][0]['value'];
	     $fileThumbnail = file_load($fidThumbnail); 
	     $aa=file_create_url($fileThumbnail->uri);
         $diagramBrowser = $diagramBrowser 
	           . '<div class="box"><img src="' . $aa . '">' 
			        . '<input type="checkbox" id="checkbox_' . $diagramCounter . '" nid="' . $node->nid . '">'
                    . '<label for="checkbox_' . $diagramCounter . '">' . $node->field_thumnail_title[LANGUAGE_NONE][0]['value'] . '</label>'
			   . '</div>';


   	     $diagramCounter++;
	     if($diagramCounter <= $default_layout && $node->field_display_on_load[LANGUAGE_NONE][0]['value'] == 1){
		     $diagramContents =  get_and_prepare_diagram($node); 
		     $resultHtml = $resultHtml . '<div class="svgContainer mdnMediumScreen">' . $diagramContents . '</div>';
		     $layoutCounter++;
	     }
      }
   }
   
   $resultHtml = $resultHtml . '</div></div>'; // close AllSVGContainer div, mdnContainer div

   // Following lines Just for testing
 
 $diagramBrowser = $diagramBrowser  . '</div>';
   /*
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
    . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
    . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
    . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
   . '<div class="box"><img src="' . $aa . '"><p>Example Title</p></div>'
 . '<p>You can press ESC to close this dialog or click <a href="#" class="simplemodal-close">close</a>.</p>'
 */
   
   $resultHtml = $resultHtml . $diagramBrowser;
   
   $settingsArr=array(
                      'connections' => get_connections(), 
					  'visualElements' => get_visual_elements_with_connections(),
					  'heatmap' => get_heatmap4(), 
					  'userData' => user_firstSession(),
					  'LayoutNoOfDiagrams' => $layoutCounter,
					  'NoOfDiagrams' => $diagramCounter);
					  
					  // connections -> all connections
					  //Visaul elements -> all visual elements having connections to other elements
   drupal_add_js($settingsArr, 'setting');
   
   return  $resultHtml;  
  
}

// function for research purposes, will be removed
function get_heatmap(){
	// range 7 to 124
	$result = db_query("SELECT * FROM heatmapFirstSessionAllUsersHoverCount");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->sub_section;
	  $arr[$count][1] = $record->cnt;
	  $arr[$count][2] = 'AGView';
    $count++;	 
	}
	
return $arr;
}

function get_heatmap2(){ //click count for all users for first session
    // range 1 to 8
	$result = db_query("SELECT sub_section, count(minid) as cnt FROM UserCleanGroupHover where ACTION ='click' group by sub_section");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->sub_section;
	  $arr[$count][1] = $record->cnt;
	  $arr[$count][2] = 'AGView';
    $count++;	 
	}
	
return $arr;
}

function get_heatmap3(){ //click count for all users for second session
    //  range 1 to 11
	$result = db_query("SELECT page_section, sub_section, count(minid) as cnt FROM UserCleanGroupHover where ACTION ='click2' group by page_section, sub_section");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->sub_section;
	  $arr[$count][1] = $record->cnt;
	  $arr[$count][2] = $record->page_section;
    $count++;	 
	}
	
return $arr;
}

function get_heatmap4(){ //hover count for all users for second session
    // range 1 to 68
	$result = db_query("SELECT page_section, sub_section, count(minid) as cnt FROM UserCleanGroupHover where ACTION ='hoverout' group by page_section, sub_section");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->sub_section;
	  $arr[$count][1] = $record->cnt;
	  $arr[$count][2] = $record->page_section;
    $count++;	 
	}
	
return $arr;
}

//SELECT * FROM `UserCleanGroupHover` WHERE (action ='hoverout' or action = 'click2') and (sub_section = 'b15' or sub_section = 'c31') order by user_id, minid
/*
SELECT * 
FROM  `UserCleanGroupHover` 
WHERE (

ACTION =  'hoverout'
OR ACTION =  'click2'
)
AND (
sub_section =  'b15'
OR sub_section =  'c31'
)
ORDER BY user_id, minid
*/
function user_firstSession(){
	$result = db_query("SELECT * FROM UserCleanGroupHover where user_id = 2006 and minid >= 24293 and minid <= 25225 order by minid");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->action_time;
	  $arr[$count][1] = $record->page_section;
	  $arr[$count][2] = $record->sub_section;
	  $arr[$count][3] = $record->ACTION;	  
      $count++;	 
	}
	
return $arr;
	
}

function get_connections(){
   
   $result = db_query("SELECT * FROM drupalConnections");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->view1;
	  $arr[$count][1] = $record->element1;
	  $arr[$count][2] = $record->view2;
	  $arr[$count][3] = $record->element2;
    $count++;	 
	}
	
return $arr;
}

function get_visual_elements_with_connections(){
   
   $result = db_query("select view1 as viewid, element1 as elementid from drupalConnections "
                       . " where view1 !='cnt1' group by viewid,elementid "	
				   . " union "
                   . " select view2 as viewid, element2 as elementid from drupalConnections "
					   . " where view2 !='cnt1' group by viewid,elementid");
				//Retrieve all visual elements having any type of connection ( to visual or content elements)
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->viewid;
	  $arr[$count][1] = $record->elementid;
    $count++;	 
	}
	
return $arr;
}


/*
function mdn_init() {
  drupal_add_js('misc/jquery.form.js');
  drupal_add_library('system', 'drupal.ajax');
}
*/

function get_unique_svg_number(){
	 $id = variable_get('max_svg_id', 0);
	 $id++;
	 variable_set('max_svg_id', $id);
	 
	 return $id;
}


function mdn_menu() {
  $items['mdn/get/ajax'] = array(
    'page callback' => 'mdn_get_node',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_magic', 
  );
  
  //'page arguments' => array(3),

/*  
  $items['ajaxreader'] = array(
    'page callback' => 'ajax_link_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
*/  
  $items['mdn/hover'] = array(
    'page callback' => 'mdn_hover',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['mdn/diagrams'] = array(
    'page callback' => 'mdn_diagram_browser',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_diagram_browser_delivery', 
  );
    
  return $items;
}

function mdn_diagram_browser($diagram1_nid, $diagram2_nid){
   
   
   $query = new EntityFieldQuery();
   $query->entityCondition('entity_type', 'node')
	 ->entityCondition('bundle', 'diagram')
	 ->entityCondition('entity_id', array($diagram1_nid, $diagram2_nid), 'IN');                    
	// ->fieldCondition('field_display_on_load', 'value', 1, '=');
	// ->fieldOrderBy('field_display_on_load', 'entity_id', 'ASC'); check this to load the first few diagrams 
    
   $result = $query->execute();
   
   if (empty($result['node'])) {
	   	return '<p>No diagrams found</p>'; // To be completed
   }
   else {
	   $resultHtml='';
	   $nodes = entity_load('node', array_keys($result['node']));
	   foreach ($nodes as $node) {
		   $diagramContents =  get_and_prepare_diagram($node); 
		   $resultHtml = $resultHtml . '<div class="svgContainer">' . $diagramContents . '</div>';
	   }
	   return $resultHtml;
   }

}

function mdn_diagram_browser_delivery($cnt){
	 print $cnt;
}

/*
function ajax_link_response($type = 'ajax', $nid = 0) {
  // Code from https://github.com/seanbuscay/drupal-ajax-demo	
  $output = ajax_reader_load_noder($nid);
  if ($type == 'ajax') {
    $commands = array();
    $commands[] = ajax_command_replace('#content', '<div id="content">' . $output . '</div>');
    $page = array(
      '#type' => 'ajax',
      '#commands' => $commands
    );
    ajax_deliver($page);
  }
  else {
    $output = '<div id="content">' . $output . '</div>';
    return $output;
  }
}

function ajax_reader_load_noder($nid = 0) {
  $node = node_load($nid);
  if ($node) {
    $vnode = node_view($node);
    return theme("node", $vnode);
  }
 // return views_embed_view ('front','page_1', $nid);
}
*/

function mdn_hover($viewId, $elementId){
   $result = db_query("SELECT * FROM drupalConnections where (view1 = :view and element1 = :element and view2 != 'cnt1') or (view2 = :view and element2 = :element and view1 != 'cnt1')", 
   array(':view' => $viewId, ':element' => $elementId));
   
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  if($viewId === $record->view1 && $elementId === $record->element1){
	     $elem = $record->element2;
		 $view = $record->view2;
	  }	 
	  else{
	     $elem = $record->element1;   
		 $view = $record->view1;
	  }
	$arr[$count]= array('viewId' => $view, 'elementId' => $elem);
    $count++;	 
	}
   
   $arr[$count]= array('viewId' => $viewId, 'elementId' => $elementId); //adding source element 
 
   $jsonstring = drupal_json_encode($arr);
   drupal_json_output($jsonstring);
}

function mdn_get_node($visualElements){
	$links=array();
	$pieces = explode("_", $visualElements);
	
	//return '<p>' . $pieces[0] . ' ' . $pieces[1] . ' ' . $pieces[2] . ' ' . $pieces[3] . '</p>';
	
	for($i=0;$i<count($pieces);$i+=2){
		$links= array_merge($links, mdn_get_content_for_visual_element($pieces[$i],$pieces[$i+1],count($links))); 
		//return '<p>' . $pieces[$i] . ' ' . $pieces[$i+1] . ' ' . count($links) . '</p>';
	}
	
	
  if(count($links) <= 0){
	  $content = "<ul><li>No result found</li></ul>";
  }
  else{
	   $vars = array('links' => $links,
                    'attributes' => array('class' => 'links'),
					'heading' => array('text' => 'Related Pages', 'level' => 'h2'));
	   $content= theme_links($vars);
  }
  
  return $content;
}

function mdn_get_content_for_visual_element($viewId, $elementId, $count_start) {

  $result = db_query("SELECT * FROM drupalConnections where (view1 = :view and element1 = :element and view2='cnt1') or (view2 = :view and element2 = :element and view1='cnt1')", 
   array(':view' => $viewId, ':element' => $elementId));
   
  $content =""; 
  $count=$count_start;
  $elem="";

  $links = array();
  foreach ($result as $record) {
	  if($viewId === $record->view1 && $elementId === $record->element1){
	     $elem = $record->element2;
	  }	 
	  else{
	     $elem = $record->element1;   
	  }
      
	  $nodeRec = db_query("SELECT * FROM {node} where nid = :nid", array(':nid' => $elem))->fetchobject();
	  if($nodeRec){
		$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'node/' . $nodeRec->nid);
	  }
	//  else{
		  // delete this connection
	 // }
	  $count = $count +1;
  }
  
  return $links;
}

/*
function mdn_get_node($viewId, $elementId) {
  /*
     retrieve connections
	 
	 if one 
	    node load as usual
	 else
        create a list with node title and a link		 
  
  
  $result = db_query("SELECT * FROM drupalConnections where (view1 = :view and element1 = :element and view2='cnt1') or (view2 = :view and element2 = :element and view1='cnt1')", 
   array(':view' => $viewId, ':element' => $elementId));
   
  $content =""; 
  $count=0;
  $firstNid="";
  $elem="";
  
/*
 $links =  array(
  'item1' => array( 'title' => '1st Item', 'href' => 'path/one' ),
  'item2' => array( 'title' => '2nd Item', 'href' => 'path/two' ),
);

  
  $links = array();
  foreach ($result as $record) {
	  if($viewId === $record->view1 && $elementId === $record->element1){
	     $elem = $record->element2;
	  }	 
	  else{
	     $elem = $record->element1;   
	  }
      
	  $nodeRec = db_query("SELECT * FROM {node} where nid = :nid", array(':nid' => $elem))->fetchobject();
	  if($nodeRec){
		 //$content = $content . "<li>" . $nodeRec->title . "</li>";  
		// $links = array('item1' => array( 'title' => $nodeRec->title, 'href' => '?q=node/' . $nodeRec->nid ));
		$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'node/' . $nodeRec->nid);
		//$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'ajaxreader/nojs/' . $nodeRec->nid, 'attributes' => array('class' => 'use-ajax'));
		//$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'jQuery("#content").load("?q=mdn/get/ajax/svg1/b7');
		//jQuery("#content").load("?q=mdn/get/ajax/" + viewid + "/" + theElement.id);
		
	  }
	//  else{
		  // delete this connection
	 // }

	  $count = $count +1;
	  if($count == 1) 
	     {$firstNid= $elem;}
  }
  
  if($count <= 0){
	  $content = "<ul><li>No result found</li></ul>";
  }
  else if($count == 1){
      $node = node_load((int) $firstNid);
	  $cnt = node_view($node, 'teaser');
	  $content = drupal_render($cnt);
  }
  else{
	  //$content =$content . "</ul>";   
	  $vars = array('links' => $links,
                    'attributes' => array('class' => 'links'),
					'heading' => array('text' => 'Related Pages', 'level' => 'h2'));
	  //$content= theme_links($links, $attributes = array('class' => 'links'));
	  $content= theme_links($vars);
	// $content = theme('links' => $links, 'attributes' => array('class' => 'links'));
  }
  
  return $content;
  
 //   $commands = array();
   // $commands[] = ajax_command_replace('#content', '<div id="content">' . $content . '</div>');
   // $page = array(
    //  '#type' => 'ajax',
     // '#commands' => $commands
    //);
    //ajax_deliver($page);
  
  //return "<p>" . $viewId . " " . $elementId . "</p>";
}
*/


function mdn_magic($page_callback_result) {
  // Only render content

  // $content = drupal_render($page_callback_result);

  // Add CSS ans JS files, add some markup
  //$html = '<html><head><title></title>' . drupal_get_css() . drupal_get_js() . '</head><body class="jquery-ajax-load">' . $content . '</body></html>';

  //print $content;
  print $page_callback_result;

  // Perform end-of-request tasks.
  //drupal_page_footer();
}
/**
 * Implementation of hook_theme().
 */
/*
 function mdn_theme($existing, $type, $theme, $path) {
  return array(
    'mdn' => array(
      'variables' => array(),
    ),
  ); // not sure if variables is correct or not, need to read about theming
}


function theme_mdn() {
  return "<div id='mdn'><noscript>Enable JavaScript to see this awesome graph.</noscript></div>";
}
*/