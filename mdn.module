<?php
/**
 * @file
 * A block module that displays the multi diagram navigation widget.
 
 */

/*
Default diagram colors
*/ 
define("default_fill_hover_color", "rgb(235,131,22)");
define("default_stroke_hover_color", "rgb(184,16,16)");

define("default_fill_select_color", "rgb(49,96,62)");
define("default_stroke_select_color", "rgb(116,88,36)");

define("default_fill_highlight_color", "rgb(113,207,51)");
define("default_stroke_highlight_color", "rgb(113,207,51)");


/**
 * Implements hook_help().
 */ 
function mdn_help($path, $arg) {
  switch ($path) {
    case "admin/help#mdn":
      return '<p>' . t("MDN is a Widget to allow site users to browse the site through multiple diagrams. Diagrams should be in svg format. MDN allows site authors to connect related diagram elements (e.g. shapes) in different diagrams and diagram elements to drupal nodes") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function mdn_block_info() {
  $blocks['mdn'] = array(
    // The name that will appear in the block list.
    'info' => t('mdn'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mdn_block_view($delta = '') {
  switch ($delta) {
    case 'mdn':
      $block['subject'] = t('mdn');
      if (user_access('access content')) {
       $block['content'] = get_mdn(); 
      }
      break;
 }
 return $block;
}

/**
 * Update or insert diagram colors in the database (DiagramData table)
 *
 *
 * @param int $nid 
 *   Diagram node id
 * @param string(25) $svg_id 
 *   the id of the svg file containing the diagram
 * @param string $fill_hover_color
 *   Fill color in hexdecimal used when mouse hovers over the diagram element (shape)
 * @param string $fill_select_color
 *   Fill color in hexdecimal used when diagram element (shape) is clicked
 * @param string $fill_highlight_color
 *   Fill color in hexdecimal used when diagram element (shape) is highlighted (e.g. because a related element in another diagram is selected)
 * @param string $stroke_hover_color
 *   Stroke color in hexdecimal used when mouse hovers over the diagram element (shape)
 * @param string $stroke_select_color
 *   Stroke color in hexdecimal used when diagram element (shape) is clicked
 * @param string $stroke_highlight_color
 *   Stroke color in hexdecimal used when diagram element (shape) is highlighted (e.g. because a related element in another diagram is selected)
 *
 * @see get_diagram_colors()
 */

function save_diagram_colors($nid, $svg_id, $fill_hover_color, $fill_select_color, $fill_highlight_color, $stroke_hover_color, $stroke_select_color, $stroke_highlight_color){

	 $num_updated = db_update('DiagramData') // try update diagram colors if diagram exists
            ->fields(array(
            'hover_fill_color' => $fill_hover_color,
            'hover_stroke_color' => $stroke_hover_color,
			'select_fill_color' => $fill_select_color,
			'select_stroke_color' => $stroke_select_color,
			'highlight_fill_color' => $fill_highlight_color,
			'highlight_stroke_color' => $stroke_highlight_color
           ))
           ->condition('nid', $nid, '=')
           ->execute();
		   
	if($num_updated<=0){ // if diagram does not exist, insert a row for diagram colors
			 db_insert('DiagramData') 
            ->fields(array(
			'nid' => $nid,
			'svg_id' => $svg_id,
            'hover_fill_color' => $fill_hover_color,
            'hover_stroke_color' => $stroke_hover_color,
			'select_fill_color' => $fill_select_color,
			'select_stroke_color' => $stroke_select_color,
			'highlight_fill_color' => $fill_highlight_color,
			'highlight_stroke_color' => $stroke_highlight_color
           ))
           ->execute();
	}	   

}

/**
 * Get diagram colors from the database (DiagramData table)
 *
 * @param int $nid 
 *   Diagram node id
 * @param string $fill_hover_color
 *   Fill color in hexdecimal used when mouse hovers over the diagram element (shape)
 * @param string $fill_select_color
 *   Fill color in hexdecimal used when diagram element (shape) is clicked
 * @param string $fill_highlight_color
 *   Fill color in hexdecimal used when diagram element (shape) is highlighted (e.g. because a related element in another diagram is selected)
 * @param string $stroke_hover_color
 *   Stroke color in hexdecimal used when mouse hovers over the diagram element (shape)
 * @param string $stroke_select_color
 *   Stroke color in hexdecimal used when diagram element (shape) is clicked
 * @param string $stroke_highlight_color
 *   Stroke color in hexdecimal used when diagram element (shape) is highlighted (e.g. because a related element in another diagram is selected)
 *
 * @see get_diagram_colors()
 */

function get_diagram_colors($nid, &$fill_hover_color, &$fill_select_color, &$fill_highlight_color, &$stroke_hover_color, &$stroke_select_color, &$stroke_highlight_color){
	
	$result = db_query("select * from {DiagramData} where nid= :nid",array(':nid' => $nid));
   
	$result_html='';
    foreach ($result as $record) {
		$fill_hover_color=$record->hover_fill_color;
        $fill_select_color=$record->select_fill_color;
        $fill_highlight_color=$record->highlight_fill_color;
        $stroke_hover_color=$record->hover_stroke_color;
        $stroke_select_color= $record->select_stroke_color;
        $stroke_highlight_color=$record->highlight_stroke_color;
	}
	
}

/**
 * Return the svg content of a diagram. If the diagram is retrieved for the first time, the function prepares the diagram for being used in MDN 
 * by adding attributes and assigning unique ids for diagram elements
 *
 * @param array $node
 *   an array of the diagram entity objects. Same array returned from entity_load function.
 * @param string $svg_id
 *   Returns the id of the svg parent element for the svg file associated with the diagram
 *
 * @return string
 *   SVG xml in string format
 */
 
function get_and_prepare_diagram($node, &$svg_id){
	 
	  $fid = $node->field_svg_file[LANGUAGE_NONE][0]['fid'];
	  $file = file_load($fid);
      $contents = file_get_contents($file->uri);
      $doc = new DOMDocument();
      $doc->loadXML($contents);

	  $rootNode = $doc->documentElement;
      $rootNode->setAttribute("hide_elements",$node->field_hide_svg_elements[LANGUAGE_NONE][0]['value']); 
	  
      $prepared='';
	  $prepared = $rootNode->getAttribute("prepared");

	  if($prepared === ''){ // SVG file is loaded for the first time, MDN prepares svg file by assigning unique ids for the svg file and all elements
          // Giving the svg a unique id, since multiple diagrams might be used in the site, each has to have a unique id
		  $uniqueId = get_unique_svg_number(); 
		  $svgId = 'svg' . $uniqueId; 
		  $rootNode->setAttribute("id", $svgId);
          $svg_id = $svgId;
 
		  $rootNode->setAttribute("prepared", 'yes');
          
		  //Giving the svg elements unique ids
		  //Other types of svg elements can be added if needed
		  $elem_count =1;
          $elems = $doc->getElementsByTagName('path');  
          foreach ($elems as $elem) {
			 $elem_id =  $elem->getAttribute("id"); 
			 if($elem_id != '') 
                $elem->setAttribute("id", $svgId . '_' . $elem_id);
             else	 
		        $elem->setAttribute("id", $svgId . '_' . $elem_count);
			
	         $elem_count++;
          }
		  
          $elems = $doc->getElementsByTagName('ellipse');
          foreach ($elems as $elem) {
			 $elem_id =  $elem->getAttribute("id");
			 if($elem_id != '') 
                $elem->setAttribute("id", $svgId . '_' . $elem_id);
             else	 
		        $elem->setAttribute("id", $svgId . '_' . $elem_count);

	         $elem_count++;
          }
		  
		  $newContents = $doc->saveXML();
          file_put_contents($file->uri, $newContents);
		  
		  save_diagram_colors($node->nid, $svgid, default_fill_hover_color, default_fill_select_color, default_fill_highlight_color, default_stroke_hover_color, default_stroke_select_color, default_stroke_highlight_color );
      }
	  else{ // svg file is prepared before
          $svg_id = $rootNode->getAttribute("id");
		  $newContents = $doc->saveXML(); 
	  }

	  return $newContents;
}

/**
 * Return the content of the main MDN block
 *
 * @return string
 *   HTML content of the mdn block
 */
function get_mdn() {

  drupal_add_js(drupal_get_path('module', 'mdn') . '/mdnjs.js'); // mdn front end javascript code
  drupal_add_js(drupal_get_path('module', 'mdn') . '/jquery.simplemodal.1.4.4.min.js'); // library used for modal overlay windows
  
  drupal_add_css(drupal_get_path('module', 'mdn') . '/mdn.css', array('group' => CSS_DEFAULT, 'type' => 'file')); // mdn css 
 
  $default_layout = 2; // default max number of diagrams to display

  $resultHtml='<div id="mdnContainer">'  
                .'<div id="mdnButtonContainer">'
                   . '<button type="submit" value="Submit" class="mdnButton" onClick="clearSelections();">Clear Selections</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="fullScreen();">Full Screen</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="displayDiagramBrowser();">Select Diagrams</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="relatedContent();">Related Content</button>';

   if (user_access('diagram: Create new content')) { // authoring buttons
      $resultHtml = $resultHtml 
	               . '<button type="submit" value="Submit" class="mdnButton" onClick="connectionsLanuch();">Connections</button>'
				   . '<button type="submit" value="Submit" class="mdnButton" onClick="colorWinLanuch();">Colors</button>';
   }				   
    
  $resultHtml = $resultHtml 
			    .'</div>'
			    .'<div id="AllSVGContainer">';
   
  $diagramBrowser = '<div id="diagramBrowser" style="display:none">'
                       . '<div id="diagramBrowserButtons">' 
					      . '<p id="diagramBrowserComment">Select/Deselect diagrams to view in the main page</p>'
					      . '<button id="diagramBrowserOK" type="submit" value="Submit" class="mdnButton" onClick="DiagramBrowserOK();">OK</button>'
					      . '<button id="diagramBrowserCancel" type="submit" value="Submit" class="mdnButton" onClick="DiagramBrowserCancel();">Cancel</button>'
					    .'</div>';
						
  $contentBrowser  = '<div id="conWinContent" style="display:none" class="conWinContentClass d2c">'
                          .'<input type="text" name="mdnnodeName" class="connectionTextbox" id="textBoxNodeEntry" disabled>' 
					      .'<button id="TextBoxConnection" type="submit" value="Submit" class="mdnButton" onClick="c2dConnection();">Connect</button>'						  
					   .'<div id="connectedNodes">'
					   .'</div>'
                    .'</div>'; 					   
					
  $connectionWindow = '<div id="conWinContainer" class="conWinContainerClass" style="display:none">'
                           .'<div id="conWinTop">'
                               .'<div id="conWinDiagrams" class="conWinDiagramsClass d2d">'
						  	   .'</div>'
                               . $contentBrowser
						   .'</div>'
						   .'<div id="conWinButtom">'
						   .'</div>'
					  .'</div>';
					  
  $colorsWindow = '<div id="colorWinContainer" class="colorWinContainerClass" style="display:none">'
				  .'</div>';						

  $diagramCounter=0;  
  $layoutCounter =0; // counting diagrams with displayonLoad = true (will be under 2)   
						
   $query = new EntityFieldQuery();
   $query->entityCondition('entity_type', 'node')
	 ->entityCondition('bundle', 'diagram');                    
    
   $result = $query->execute();
   if (empty($result['node'])) {  // No diagrams found
		$resultHtml= $resultHtml .  '<div class="svgContainer mdnMediumScreen"></div>';
		$resultHtml= $resultHtml .  '<div class="svgContainer mdnMediumScreen"></div>';
   }
   else{
	  $nodes = entity_load('node', array_keys($result['node']));
      $aa='';

      foreach ($nodes as $node) {
	     $fidThumbnail = $node->field_thumbnail[LANGUAGE_NONE][0]['fid'];
	     $fileThumbnail = file_load($fidThumbnail); 
	     $aa=file_create_url($fileThumbnail->uri);
         $diagramBrowser = $diagramBrowser 
	           . '<div class="box"><img src="' . $aa . '">' 
			        . '<input type="checkbox" id="checkbox_' . $diagramCounter . '" nid="' . $node->nid . '">'
                    . '<label for="checkbox_' . $diagramCounter . '">' . $node->field_thumnail_title[LANGUAGE_NONE][0]['value'] . '</label>'
			   . '</div>';


   	     $diagramCounter++;
	     if($diagramCounter <= $default_layout && $node->field_display_on_load[LANGUAGE_NONE][0]['value'] == 1){
			 $svg_internal_id='';
		     $diagramContents =  get_and_prepare_diagram($node, $svg_internal_id); 
		     $resultHtml = $resultHtml . '<div class="svgContainer mdnMediumScreen">' . $diagramContents . '</div>';
		     $layoutCounter++;
			 get_diagram_colors($node->nid, $fv,$fs,$fh,$sv,$ss,$sh);
			 $diagram_colors[$svg_internal_id]= array($fv,$fs,$fh,$sv,$ss,$sh, $svg_internal_id);
	     }
      }
   }
   
   $resultHtml = $resultHtml . '</div></div>'; // close AllSVGContainer div, mdnContainer div

   $diagramBrowser = $diagramBrowser  . '</div>';
   
   $resultHtml = $resultHtml . $diagramBrowser . $connectionWindow . $colorsWindow; // diagramBrowser, connectionWindow, and colorsWindow will be populated by ajax requests
   
   $settingsArr=array(
                      'connections' => get_connections(), 
					  'visualElements' => get_visual_elements_with_connections(),
					  'LayoutNoOfDiagrams' => $layoutCounter,
					  'NoOfDiagrams' => $diagramCounter,
					  'diagram_colors' => $diagram_colors);
					  
					  // connections -> all connections
					  // Visual elements -> all visual elements having connections to visual elements and/or content elements. 
					  //                    Visual elements with no connections are not included
					  // diagram_colors includes colors for all diagrams @see save_diagram_colors, set_diagram_colors
					  
   drupal_add_js($settingsArr, 'setting');
	
   return  $resultHtml;  
}

/**
 * Returns element connections from the Connections table in the database
 *
 * @return array
 *   element connections
 */
 
function get_connections(){
   
   $result = db_query("SELECT * FROM drupalConnections");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->view1;
	  $arr[$count][1] = $record->element1;
	  $arr[$count][2] = $record->view2;
	  $arr[$count][3] = $record->element2;
    $count++;	 
	}
	
return $arr;
}

/**
 * Returns all visual elements having connections to visual elements and/or content elements. 
 * Visual elements with no connections are not included
 *
 * @return array
 *   visual elements
 */
 
function get_visual_elements_with_connections(){
   
   $result = db_query("select view1 as viewid, element1 as elementid from drupalConnections "
                       . " where view1 !='cnt1' group by viewid,elementid "	
				   . " union "
                   . " select view2 as viewid, element2 as elementid from drupalConnections "
					   . " where view2 !='cnt1' group by viewid,elementid");
				//Retrieve all visual elements having any type of connection ( to visual or content elements)
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->viewid;
	  $arr[$count][1] = $record->elementid;
    $count++;	 
	}
	
return $arr;
}

/**
 * Returns unique number to be used with a new diagram (svg)
 *
 * @return int
 *   svg id
 */
function get_unique_svg_number(){
	 $id = variable_get('max_svg_id', 0);
	 $id++;
	 variable_set('max_svg_id', $id);
	 
	 return $id;
}

/**
 * Implements hook_menu().
 */
 
function mdn_menu() {
  $items['mdn/get/ajax'] = array(
    'page callback' => 'mdn_get_node',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_magic', 
  );
  
  $items['mdn/hover'] = array(
    'page callback' => 'mdn_addc2dconnection',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['mdn/diagrams'] = array(
    'page callback' => 'mdn_diagram_browser',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_diagram_browser_delivery', 
  );

  $items['mdn/connectionsWindow'] = array(
    'page callback' => 'mdn_connections_window',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_connections_window_delivery', 
  );

  $items['mdn/colorsWindow'] = array(
    'page callback' => 'mdn_colors_window',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_colors_window_delivery', 
  );
  
  
  $items['mdn/getDiagram'] = array(
    'page callback' => 'get_diagram',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'get_diagram_delivery', 
  );
  
  $items['mdn/createConnection'] = array(
    'page callback' => 'mdn_create_connection',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  
  $items['mdn/deleteConnection'] = array(
    'page callback' => 'mdn_delete_connection',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['mdn/nodeTitles'] = array(
    'page callback' => 'mdn_node_titles',
	'type' => MENU_CALLBACK,   
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_node_titles_delivery', 
  );
  
  $items['mdn/saveDiagramColors'] = array(
    'page callback' => 'mdn_save_diagram_colors',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Return titles of related (connected) nodes for a specific visual element. This function is used to display related (connected) nodes for a visual element along with a button for each title
 * the buttons is used to delete the connection between the visual element and the node
 *
 * @param string $viewId
 *   the svg id of the visual element
 * @param string $elementId
 *   the element id for the visual element
 *
 * @return string
 *   HTML containing a list of titles and buttons
 */
 
function mdn_node_titles($viewId, $elementId){

  $SQL = "SELECT nid,title FROM drupalnode inner join drupalConnections on drupalnode.nid = drupalConnections.element2 where drupalConnections.view1=:view and drupalConnections.element1=:element and drupalConnections.view2='cnt1'"
	   ." union "
	   ." SELECT nid,title FROM drupalnode inner join drupalConnections on drupalnode.nid = drupalConnections.element1 where drupalConnections.view2=:view and drupalConnections.element2=:element and drupalConnections.view1='cnt1'";

   $result = db_query($SQL,array(':view' => $viewId, ':element' => $elementId));
   
	$result_html='';
    foreach ($result as $record) {
       $result_html= $result_html 
	               . '<div id="nid_'. $record->nid .'" >' 
                      . '<button type="submit" value="Submit" class="mdnButton" onClick="deleteVE2CEConnection(' . $record->nid . ');">delete Connection</button>'				
				      .'<span>' . $record->title . '</span>'
				   .'</div>';		
	}

	return $result_html;
}

/**
 * Delivery function for mdn_node_titles
 * Delivery function is used to populate a certain Div using ajax. 
 * if delivery function is not used, the HTML in cnt will be wrapped with Drupal header, sides, ... etc. and a whole page will be returned instead of the wanted html snippet.
 *
 * @param string $cnt
 *   HTML string from mdn_node_titles
 *
 * @return string
 *   the same cnt HTML string
 */
 
function mdn_node_titles_delivery($cnt){
	 print $cnt;
}

/**
 * Delete a connection between two elements
 *
 * @param string $view1
 *   the svg id of the first visual element
 * @param string $element1
 *   the element id of the first visual element
 * @param string $view2
 *   the svg id of the second visual element
 * @param string $element2
 *   the element id of the second visual element
 *
 */
 
function mdn_delete_connection($view1, $element1, $view2, $element2){
	$and1 = db_and()->condition('view1', $view1)->condition('element1', $element1)->condition('view2', $view2)->condition('element2', $element2);
	$and2 = db_and()->condition('view2', $view1)->condition('element2', $element1)->condition('view1', $view2)->condition('element1', $element2);
	$or = db_or()->condition($and1)->condition($and2);
	
	db_delete('Connections')->condition($or)->execute();
}

/**
 * Creates a connection between two elements
 *
 * @param string $view1
 *   the svg id of the first visual element
 * @param string $element1
 *   the element id of the first visual element
 * @param string $view2
 *   the svg id of the second visual element
 * @param string $element2
 *   the element id of the second visual element
 *
 */
function mdn_create_connection($view1, $element1, $view2, $element2){
	
	db_insert('Connections') 
    ->fields(array(
       'view1' => $view1,
       'element1' => $element1,
       'view2' => $view2,
       'element2' => $element2,
   ))->execute();
}

/**
 * Wrapper for save_diagram_colors. it is used by mdn_menu
 *
* @param int $nid 
 *   Diagram node id
 * @param string $fill_hover_color
 *   Fill color in hexdecimal used when mouse hovers over the diagram element (shape)
 * @param string $fill_select_color
 *   Fill color in hexdecimal used when diagram element (shape) is clicked
 * @param string $fill_highlight_color
 *   Fill color in hexdecimal used when diagram element (shape) is highlighted (e.g. because a related element in another diagram is selected)
 * @param string $stroke_hover_color
 *   Stroke color in hexdecimal used when mouse hovers over the diagram element (shape)
 * @param string $stroke_select_color
 *   Stroke color in hexdecimal used when diagram element (shape) is clicked
 * @param string $stroke_highlight_color
 *   Stroke color in hexdecimal used when diagram element (shape) is highlighted (e.g. because a related element in another diagram is selected)

 * @see mdn_save_diagram_colors
 */
 
function  mdn_save_diagram_colors($nid, $fill_hover_color, $fill_select_color, $fill_highlight_color, $stroke_hover_color, $stroke_select_color, $stroke_highlight_color){
	save_diagram_colors($nid, '', '#' . $fill_hover_color, '#' . $fill_select_color, '#' . $fill_highlight_color, '#' . $stroke_hover_color, '#' . $stroke_select_color, '#' . $stroke_highlight_color);
}

/**
 * Wrapper for get_and_prepare_diagram. it is used by mdn_menu
 *
* @param int $diagram_nid 
 *   Diagram node id
 *
 * @see get_and_prepare_diagram
 */
function get_diagram($diagram_nid){
	if($diagram_nid != 'cnt1'){
	   $nodes = entity_load('node', array($diagram_nid));
	   $svg_internal_id='';
	   return get_and_prepare_diagram(array_shift($nodes), $svg_internal_id);
	}
}

/**
 * Delivery function for get_diagram
 * Delivery function is used to populate a certain Div using ajax. 
 * if delivery function is not used, the HTML in cnt will be wrapped with Drupal header, sides, ... etc. and a whole page will be returned instead of the wanted html snippet.
 *
 * @param string $cnt
 *   HTML string from get_diagram
 *
 * @return string
 *   the same cnt HTML string
 */
 
function get_diagram_delivery($cnt){
	 print $cnt;
}

/**
 * returns html code for one or two diagrams. 
 * The diagram browser window allows the user to select one or two diagrams to be displayed; this function returns these diagrams
 *
 * @param int $diagram1_nid
 *   nid of the first diagram
 * @param int $diagram2_nid
 *   nid of the second diagram
 *
 * @return string
 *   HTML code for the diagram(s)
 */
 
function mdn_diagram_browser($diagram1_nid, $diagram2_nid){
   
   $query = new EntityFieldQuery();
   $query->entityCondition('entity_type', 'node')
	 ->entityCondition('bundle', 'diagram')
	 ->entityCondition('entity_id', array($diagram1_nid, $diagram2_nid), 'IN');                    
    
   $result = $query->execute();
   
   if (empty($result['node'])) {
	   	return '<p>No diagrams found</p>'; // To be completed
   }
   else {
	   $resultHtml='';
	   $nodes = entity_load('node', array_keys($result['node']));
	   foreach ($nodes as $node) {
		   $svg_internal_id='';
		   $diagramContents =  get_and_prepare_diagram($node, $svg_internal_id); 
		   $resultHtml = $resultHtml . '<div class="svgContainer">' . $diagramContents . '</div>';
	   }
	   return $resultHtml;
   }

}

/**
 * returns html code for colors window.  
 * This window allows site authors to change color scheme used for hovered, selected, and highlighted elements 
 *
 * @return string
 *   HTML code for the colors window
 */
 
function mdn_colors_window(){
	$resultHtml = '';
	$diagramDropDownList ='';			  

	$query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'diagram');
	
	$result = $query->execute();

	if(!isset($result['node'])) { 
		$resultHtml = 'No Diagrams Available';
		return $resultHtml;
	}
	
	$diagrams_nids = array_keys($result['node']);
    $diagrams = entity_load('node', $diagrams_nids);
	
	$counter=0;
	foreach ($diagrams as $node) {
	   $counter++;

	   if($counter == 1){ // return first diagram, and mark the diagram's option as selected
		  $svg_internal_id=''; 
		  $diagramContents =  get_and_prepare_diagram($node, $svg_internal_id); 
	      $resultHtml = $resultHtml . '<div id ="colorWinDiagram" class="colorWinDiagramClass">' . $diagramContents . '</div>';
          $diagramDropDownList = $diagramDropDownList
	                         . '<option value="' . $node->nid . '" selected="selected">' . $node->title . '</option>';	
	   }
	   else{ // for other diagrams, add an option in the drop down list so users can change the diagram
	      $diagramDropDownList = $diagramDropDownList
	                         . '<option value="' . $node->nid . '">' . $node->title . '</option>';		   	   
	   }
	}
	
    $resultHtml = $resultHtml  
	             .'<div id="colorWinButtom">' 
				    .'<div class="colorWinGroup">' 
					   . '<select id="colorWinSelectionList" onChange="colorWinselectListChanged(this);">'
						   . $diagramDropDownList
					   . '<select>'
				 	   . '<button type="submit" value="Submit" class="mdnButton" onClick="colorWinClose();">Close</button>'
                       . '<button type="submit" value="Submit" class="mdnButton" onClick="colorWinSave();">Save Colors</button>'
					.'</div>'
					.'<div class="colorWinGroup">' 
					    . '<button id="testHover" type="submit" value="Submit" class="mdnButton" onClick="showColor(this);">Test on Diagram</button>'
						. '<label for="mdnHoverFillText">hover fill</label>'
					    . '<input type="color" id="mdnHoverFillText" value="#ff0000"/>'
						. '<label for="mdnHoverStrokeText">hover Stroke</label>'
					    . '<input type="color" id="mdnHoverStrokeText" value="#ff0000"/>'
                    .'</div>'
					.'<div class="colorWinGroup">' 
					    . '<button id="testSelect" type="submit" value="Submit" class="mdnButton" onClick="showColor(this);">Test on Diagram</button>'
						. '<label for="mdnSelectFillText">Select fill</label>'
					    . '<input type="color" id="mdnSelectFillText" value="#ff0000"/>'
						. '<label for="mdnSelectStrokeText">Select Stroke</label>'
					    . '<input type="color" id="mdnSelectStrokeText" value="#ff0000"/>'
                    .'</div>'
					.'<div class="colorWinGroup">' 
					    . '<button id="testHighlight" type="submit" value="Submit" class="mdnButton" onClick="showColor(this);">Test on Diagram</button>'
						. '<label for="mdnHighlightFillText">Highlight fill</label>'
					    . '<input type="color" id="mdnHighlightFillText" value="#ff0000"/>'
						. '<label for="mdnHighlightStrokeText">Highlight Stroke</label>'
					    . '<input type="color" id="mdnHighlightStrokeText" value="#ff0000"/>'
                    .'</div>'

				 .'</div>';
									
    return $resultHtml;
}

/**
 * returns html code for connections window.  
 * This window allows site authors to connect visual elements to other visual elements and visual elements to content elements (nodes)
 *
 * @return string
 *   HTML code for the connections window
 */
 
function mdn_connections_window(){
	
    /* layout for the connections window
	div conWinContainer  display:none
	  div conWinTop     
		 div conWinDiagrams
		    div conWinDiagram1
			div conWinDiagram2
			div buttomBuffer display:none
		 div conWinContent
	  div conWinButtom  //place holder	
	*/
	
	$resultHtml = '';
				  
	$diagramDropDownList ='';			  
	
	
	$query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'diagram');
	
	$result = $query->execute();

	if(!isset($result['node'])) { 
		$resultHtml = 'No Diagrams Available';
		return $resultHtml;
	}
	
	$diagrams_nids = array_keys($result['node']);
    $diagrams = entity_load('node', $diagrams_nids);
	
	$counter=0;
	foreach ($diagrams as $node) {
	   $counter++;
	   $svg_internal_id='';
	   $diagramContents =  get_and_prepare_diagram($node, $svg_internal_id); 

	   if($counter == 1){
	      $resultHtml = $resultHtml . '<div id ="conWinDiagram1" class="conWinDiagram1Class d2d">' . $diagramContents . '</div>';
			$nid1 = $node->nid; // will be used to create an option element below
			$title1 = $node->title;
	   }
	   else if($counter == 2){
	      $resultHtml = $resultHtml . '<div id ="conWinDiagram2" class="conWinDiagram2Class d2d">' . $diagramContents . '</div>';
			$nid2 = $node->nid; // will be used to create an option element below
			$title2 = $node->title;
	   }
	   else{
       $diagramDropDownList = $diagramDropDownList
	                         . '<option value="' . $node->nid . '">' . $node->title . '</option>';			   	   
	   }
	}
	
    $resultHtml = $resultHtml  
	             .'<div id="buttomBuffer" style="display:none">' 
	                 .'<select id="diagramSelectionList1" onChange="selectListChanged(this);">'
						   . '<option value="' . $nid1 . '"  selected="selected">' . $title1 . '</option>' 
						   . '<option value="' . $nid2 . '">' . $title2 . '</option>'
						   . $diagramDropDownList
					. '<select>'; // in this drop down list, the option of the first diagram is selected
									
		$resultHtml = $resultHtml 
		                 . '<button type="submit" value="Submit" class="mdnButton" onClick="CreateConnection();">Create Connection</button>'
                         . '<button type="submit" value="Submit" class="mdnButton" onClick="ClearLeftSide();">Clear Selections</button>'
                         . '<button type="submit" value="Submit" class="mdnButton" onClick="ClearRightSide();">Clear Selections</button>'						 
					     . '<button type="submit" value="Submit" class="mdnButton" onClick="DeleteConnection();">Delete Connection</button>';

        $resultHtml = $resultHtml . '<select id="diagramSelectionList2" onChange="selectListChanged(this);">'
									       . '<option value="cnt1">Content: Drupal Nodes</option>'
										   . '<option value="' . $nid1 . '">' . $title1 . '</option>'
										   . '<option value="' . $nid2 . '"  selected="selected">' . $title2 . '</option>'
									       . $diagramDropDownList
								  . '<select>'; // in this drop down list, the option of the second diagram is selected
							
        $resultHtml = $resultHtml . '<div id="connectionWindowStatus">Select diagram elements or Drupal nodes in each side and click connect</div>'; 								

				  
    $resultHtml = $resultHtml . '</div>'; //buttomBuffer		
  
    return $resultHtml;
	
}


function mdn_diagram_browser_delivery($cnt){
	 print $cnt;
}


function mdn_connections_window_delivery($cnt){
	 print $cnt;
}

function mdn_colors_window_delivery($cnt){
	 print $cnt;
}

/**
 * Creates a connection between a content element(node) and a visual element 
 *
 * @param string $diagramId
 *   visual element diagram id
 * @param string $visualElementId
 *   visual element id
 * @param string $mdnNodeTitle
 *   title of content element
 * 
  * @return array of one number
 *   nid of content element
 */
 
function mdn_addc2dconnection($diagramId, $visualElementId, $mdnNodeTitle){
   $result = db_query("Select nid from {node} where title = :nodeTitle", array(':nodeTitle' => $mdnNodeTitle));
   
   $mdn_nid=-1;
   foreach ($result as $record) {
      $mdn_nid = $record->nid;
	  break;
   }		  

   if($mdn_nid>0){
	   	db_insert('Connections') 
           ->fields(array(
            'view1' => $diagramId,
            'element1' => $visualElementId,
            'view2' => 'cnt1',
            'element2' => $mdn_nid,
           ))->execute();
		   
       $arr=array('mdn_nid' => $mdn_nid);
   }
   else{
	   $arr=array('mdn_nid' => 'title not found');
   }
   
   $jsonstring = drupal_json_encode($arr);
   drupal_json_output($jsonstring);
}

/**
 * Retrieves a list of links of content elements (nodes) related to the given list of visual elements
 * This function is used in diagram to content browsing. When a user selects multiple visual elements, MDN sends list of these visual elements to this function
 * to get a list of related content elements (nodes)
 *
 * @param string $visualElements
 *   a string containing a list of visual elements separated by underscore
 * 
 * @return HTML code for a list of links to the related content elements
 */
 
function mdn_get_node($visualElements){
	$links=array();
	$pieces = explode("_", $visualElements);
	
	for($i=0;$i<count($pieces);$i+=2){
		$links= array_merge($links, mdn_get_content_for_visual_element($pieces[$i],$pieces[$i+1],count($links))); 
	}
	
	
  if(count($links) <= 0){
	  $content = "<ul><li>No result found</li></ul>";
  }
  else{
	   $vars = array('links' => $links,
                    'attributes' => array('class' => 'links'),
					'heading' => array('text' => 'Related Pages', 'level' => 'h2'));
	   $content= theme_links($vars);
  }
  
  return $content;
}


function mdn_get_content_for_visual_element($viewId, $elementId, $count_start) {

  $result = db_query("SELECT * FROM drupalConnections where (view1 = :view and element1 = :element and view2='cnt1') or (view2 = :view and element2 = :element and view1='cnt1')", 
   array(':view' => $viewId, ':element' => $elementId));
   
  $content =""; 
  $count=$count_start;
  $elem="";

  $links = array();
  foreach ($result as $record) {
	  if($viewId === $record->view1 && $elementId === $record->element1){
	     $elem = $record->element2;
	  }	 
	  else{
	     $elem = $record->element1;   
	  }
      
	  $nodeRec = db_query("SELECT * FROM {node} where nid = :nid", array(':nid' => $elem))->fetchobject();
	  if($nodeRec){
		$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'node/' . $nodeRec->nid);
	  }

	  $count = $count +1;
  }
  
  return $links;
}


function mdn_magic($page_callback_result) {

  print $page_callback_result;

}
