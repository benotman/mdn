<?php
/**
 * @file
 * A block module that displays the multi diagram navigation widget.
 
 /**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function mdn_help($path, $arg) {
  switch ($path) {
    case "admin/help#mdn":
      return '<p>' . t("Widget to show diagrams") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function mdn_block_info() {
  $blocks['mdn'] = array(
    // The name that will appear in the block list.
    'info' => t('mdn'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
    $blocks['mdnNodeViewer'] = array(
    // The name that will appear in the block list.
    'info' => t('mdnNodeViewer'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

function mdn_block_view($delta = '') {
  switch ($delta) {
    case 'mdn':
      $block['subject'] = t('mdn');
      if (user_access('access content')) {
       $block['content'] = get_mdn(); //"<div id='mdn'><p>Test block</p></div>";
      }
      break;
	  
    case 'mdnNodeViewer':
      $block['subject'] = t('mdn Node Viewer');
      if (user_access('access content')) {
       $block['content'] = "<div id='mdnNodeViewer'><p>default node will be displayed</p></div>"; //"<div id='mdn'><p>Test block</p></div>";
	  }
	  break;
 }
 return $block;
}

function get_mdn() {
 // drupal_add_js(drupal_get_path('module', 'mdn') .'/js/jquery-1.11.1.min.js');
 // drupal_add_js(drupal_get_path('module', 'mdn') .'/js/jquery.contextMenu.js');
 
  drupal_add_js(drupal_get_path('module', 'mdn') . '/mdnjs.js');
 
  $diagram_data = array();
 
  /*
     Check the default layout (one, two, three, or four diagrams) (two for now)
	 Retrieve the required # of default SVGs (top 1,2,3, or 4) (SVG markup in DOM and SVG record in the database)
	 iterate over default SVGs (the first few)
	    if current svg is not curated before
		   load, embed, change ids
		   
	       if SVG_hide_elements = true // SVG elements are on top of image 
  		      change css to hide elements
	     
        content = content . current SVG
		
		embed the default SVGs in the main mdn html 
	    two divs for now 
		required buttons
	    load any required CSS (maybe for diagram browser)
	 
	-----------------------
    I need following configuration info.
	- default layout
	
	For every SVG
	- default SVG true/false 
	- hide elements true/false 
    - highlight color
    - select color
    - hover color	
  */
  
    
   $default_layout = 2; // default number of diagrams to display
   
   $criteria = '1';  //Retrieve diagrams that have the display_on_load attribute = 1
   $query = new EntityFieldQuery();
   $query->entityCondition('entity_type', 'node')
	 ->entityCondition('bundle', 'diagram')                    
	 ->fieldCondition('field_display_on_load', 'value', $criteria, '=');
	// ->fieldOrderBy('field_display_on_load', 'entity_id', 'ASC'); check this to load the first few diagrams 
    
   $result = $query->execute();
   if (empty($result['node'])) {
	   	return '<p>No diagrams found</p>';
      // $entities = entity_load($entity_type, array_keys($result[$entity_type]));
   }

   $counter=1;
   $visual_element_list_this_diagram = array();
   $visual_element_list = array();
   $resultHtml='';
   $newContents='';
   $nodes = entity_load('node', array_keys($result['node']));
   
   
  // $res = print_r($nodes, true);
  // return $res;
   
   foreach ($nodes as $node) {
      $fid = $node->field_svg_file[LANGUAGE_NONE][0]['fid'];
	  //$hide_elements = $node->field_hide_svg_elements[LANGUAGE_NONE][0]['value'];
	  $file = file_load($fid);
      $contents = file_get_contents($file->uri);
      $doc = new DOMDocument();
      $doc->loadXML($contents);

      $rootNode = $doc->documentElement;
	  $prepared='';
	  
	  $prepared = $rootNode->getAttribute("prepared");
      $svgId = $rootNode->getAttribute("id");
	  $rootNode->setAttribute("hide_elements",$node->field_hide_svg_elements[LANGUAGE_NONE][0]['value']); // try to use drupal_add_js settings instead
	  
	  if($prepared === ''){ // SVG file is loaded for the first time, MDN prepares svg file by assigning unique ids for the svg file and all elements

          $scriptNode = $doc->createElement("script");
          $rootNode->appendChild($scriptNode);
	      $svg_js = file_get_contents(drupal_get_path('module', 'mdn') . '/SVGjs2.js'); 
	      $cdata = $doc->createCDATASection($svg_js);
		  $scriptNode->appendChild($cdata);
 		
		  $uniqueId = get_unique_svg_number();
		  //$svgId = 'svg' . $uniqueId; 
          $svgId = $rootNode->getAttribute("id");
		  
          // Commented for testing, uncomment for final version
		 // $rootNode->setAttribute("id", $svgId);
		  $rootNode->setAttribute("prepared", 'yes');
          		  
		  $elem_count =1;
          $elems = $doc->getElementsByTagName('path');
          foreach ($elems as $elem) {
             $elem->setAttribute("id", $svgId . '_' . $elem_count);
			 $elem->setAttribute("OriginalStyle", $elem->getAttribute("style"));
	         $elem_count++;
          }
		  
          $elems = $doc->getElementsByTagName('ellipse');
          foreach ($elems as $elem) {
             $elem->setAttribute("id", $svgId . '_' . $elem_count);
			 $elem->setAttribute("OriginalStyle", $elem->getAttribute("style"));
	         $elem_count++;
          }
		  
		  
		  $newContents = $doc->saveXML();
		  // Commented for testing, uncomment for final version
          file_put_contents($file->uri, $newContents);
		  
      }
	  else{ // svg file is prepared before
		  $newContents = $doc->saveXML(); 
	  }
	  
     $resultHtml = $resultHtml . '<br>' . $newContents;
	 //$diagram_data[$svgId]['hide']= $node->field_hide_svg_elements[LANGUAGE_NONE][0]['value'];
	 
	 $visual_element_list_this_diagram=get_visual_elements_with_connections($svgId);
	 $visual_element_list = array_merge($visual_element_list, $visual_element_list_this_diagram);
	 $counter++;
	 if($counter > $default_layout)
	    break;
   }

   $settingsArr=array(
                      'connections' => get_connections(),
					  'visualElements' => $visual_element_list);
   drupal_add_js($settingsArr, 'setting');
   
   return  $resultHtml;  
  // $svg_js='none';
   //$diagrams = db_query("SELECT {file_managed}.fid,{file_managed}.uri FROM (({file_managed} inner join {file_usage} on {file_managed}.fid={file_usage}.fid) inner join {node} on {file_usage}.id = {node}.nid) where {node}.type = 'diagram'", 
   //$diagrams = db_query("SELECT t1.fid,t1.uri FROM (({file_managed} as t1 inner join {file_usage} as t2 on t1.fid=t2.fid) inner join {node} as t3 on t2.id = t3.nid) where t3.type = 'diagram'");
   //foreach ($diagrams as $record) {
	  //$temp = $record->uri;   
	  
   //} 
  
  
  
  
  //$pos = strrpos($contents, '</svg', -1);

  //if ($pos === false){
	//$contents2 = "SVG file is not valid. Please make sure to load diagrams in SVG format";
	//}
  //else{
    //$contents2 = substr_replace($contents, $svg_js, $pos, 0);  	 
  //}
  
  
  

  

  
  //$file = file_load(8);
  //$contents = file_get_contents($file->uri);
  //$pos = strrpos($contents, '</svg', -1);
    
  //if ($pos === false){
//	$contents2 = $contents2 . '<br>' . "SVG file is not valid. Please make sure to load diagrams in SVG format";
	//}
  //else{
    //$contents3 = substr_replace($contents, $svg_js, $pos, 0);
    //$contents2 = $contents2 . '<br>' . $contents3;	
    //}
   
   /*
   Possible design 
   2 divs one over the other and a space for buttons
   zoom button will be in the svg
   
   */
    //$contents2 = $contents2 . '<br><a href="?q=ajaxreader/nojs/5" class="use-ajax"> test link</a>';
	//$contents2 = $contents2 . '<br>' . $txt;
	
  //return  "<div id='mdn'><p>hello</p></div>";
  
}

function get_connections(){
   
   $result = db_query("SELECT * FROM drupalConnections");
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->view1;
	  $arr[$count][1] = $record->element1;
	  $arr[$count][2] = $record->view2;
	  $arr[$count][3] = $record->element2;
    $count++;	 
	}
	
return $arr;
}

function get_visual_elements_with_connections($diagramId){
   
   $result = db_query("select view1 as viewid, element1 as elementid from drupalConnections "
                       . " where view2 != 'cnt1' and view1 != 'cnt1' and view1 =:diagramid group by viewid,elementid "
				   . " union "
                   . " select view2 as viewid, element2 as elementid from drupalConnections "
					   . " where view1 != 'cnt1' and view2 != 'cnt1' and view2 =:diagramid group by viewid,elementid",
					   array('diagramid' => $diagramId));
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  $arr[$count][0] = $record->viewid;
	  $arr[$count][1] = $record->elementid;
    $count++;	 
	}
	
return $arr;
}


/*
function mdn_init() {
  drupal_add_js('misc/jquery.form.js');
  drupal_add_library('system', 'drupal.ajax');
}
*/

function get_unique_svg_number(){
	 $id = variable_get('max_svg_id', 0);
	 $id++;
	 variable_set('max_svg_id', $id);
	 
	 return $id;
}


function mdn_menu() {
  $items['mdn/get/ajax'] = array(
    'page callback' => 'mdn_get_node',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
	'delivery callback' => 'mdn_magic', 
  );
  
  //'page arguments' => array(3),

/*  
  $items['ajaxreader'] = array(
    'page callback' => 'ajax_link_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
*/  
  $items['mdn/hover'] = array(
    'page callback' => 'mdn_hover',
	'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  
  return $items;
}

/*
function ajax_link_response($type = 'ajax', $nid = 0) {
  // Code from https://github.com/seanbuscay/drupal-ajax-demo	
  $output = ajax_reader_load_noder($nid);
  if ($type == 'ajax') {
    $commands = array();
    $commands[] = ajax_command_replace('#content', '<div id="content">' . $output . '</div>');
    $page = array(
      '#type' => 'ajax',
      '#commands' => $commands
    );
    ajax_deliver($page);
  }
  else {
    $output = '<div id="content">' . $output . '</div>';
    return $output;
  }
}

function ajax_reader_load_noder($nid = 0) {
  $node = node_load($nid);
  if ($node) {
    $vnode = node_view($node);
    return theme("node", $vnode);
  }
 // return views_embed_view ('front','page_1', $nid);
}
*/

function mdn_hover($viewId, $elementId){
   $result = db_query("SELECT * FROM drupalConnections where (view1 = :view and element1 = :element and view2 != 'cnt1') or (view2 = :view and element2 = :element and view1 != 'cnt1')", 
   array(':view' => $viewId, ':element' => $elementId));
   
    $count=0;   
	$arr=array();
    foreach ($result as $record) {
	  if($viewId === $record->view1 && $elementId === $record->element1){
	     $elem = $record->element2;
		 $view = $record->view2;
	  }	 
	  else{
	     $elem = $record->element1;   
		 $view = $record->view1;
	  }
	$arr[$count]= array('viewId' => $view, 'elementId' => $elem);
    $count++;	 
	}
   
   $arr[$count]= array('viewId' => $viewId, 'elementId' => $elementId); //adding source element 
 
   $jsonstring = drupal_json_encode($arr);
   drupal_json_output($jsonstring);
}

function mdn_get_node($viewId, $elementId) {
  /*
     retrieve connections
	 
	 if one 
	    node load as usual
	 else
        create a list with node title and a link		 
  */
  
  $result = db_query("SELECT * FROM drupalConnections where (view1 = :view and element1 = :element and view2='cnt1') or (view2 = :view and element2 = :element and view1='cnt1')", 
   array(':view' => $viewId, ':element' => $elementId));
   
  $content =""; 
  $count=0;
  $firstNid="";
  $elem="";
  
/*
 $links =  array(
  'item1' => array( 'title' => '1st Item', 'href' => 'path/one' ),
  'item2' => array( 'title' => '2nd Item', 'href' => 'path/two' ),
);
*/
  
  $links = array();
  foreach ($result as $record) {
	  if($viewId === $record->view1 && $elementId === $record->element1){
	     $elem = $record->element2;
	  }	 
	  else{
	     $elem = $record->element1;   
	  }
      
	  $nodeRec = db_query("SELECT * FROM {node} where nid = :nid", array(':nid' => $elem))->fetchobject();
	  if($nodeRec){
		 //$content = $content . "<li>" . $nodeRec->title . "</li>";  
		// $links = array('item1' => array( 'title' => $nodeRec->title, 'href' => '?q=node/' . $nodeRec->nid ));
		$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'node/' . $nodeRec->nid);
		//$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'ajaxreader/nojs/' . $nodeRec->nid, 'attributes' => array('class' => 'use-ajax'));
		//$links['item' . $count] = array( 'title' => $nodeRec->title, 'href' => 'jQuery("#content").load("?q=mdn/get/ajax/svg1/b7');
		//jQuery("#content").load("?q=mdn/get/ajax/" + viewid + "/" + theElement.id);
		
	  }
	//  else{
		  // delete this connection
	 // }

	  $count = $count +1;
	  if($count == 1) 
	     {$firstNid= $elem;}
  }
  
  if($count <= 0){
	  $content = "<ul><li>No result found</li></ul>";
  }
  else if($count == 1){
      $node = node_load((int) $firstNid);
	  $cnt = node_view($node, 'teaser');
	  $content = drupal_render($cnt);
  }
  else{
	  //$content =$content . "</ul>";   
	  $vars = array('links' => $links,
                    'attributes' => array('class' => 'links'),
					'heading' => array('text' => 'Related Pages', 'level' => 'h2'));
	  //$content= theme_links($links, $attributes = array('class' => 'links'));
	  $content= theme_links($vars);
	// $content = theme('links' => $links, 'attributes' => array('class' => 'links'));
  }
  
  return $content;
  
 //   $commands = array();
   // $commands[] = ajax_command_replace('#content', '<div id="content">' . $content . '</div>');
   // $page = array(
    //  '#type' => 'ajax',
     // '#commands' => $commands
    //);
    //ajax_deliver($page);
  
  //return "<p>" . $viewId . " " . $elementId . "</p>";
}

function mdn_magic($page_callback_result) {
  // Only render content

  // $content = drupal_render($page_callback_result);

  // Add CSS ans JS files, add some markup
  //$html = '<html><head><title></title>' . drupal_get_css() . drupal_get_js() . '</head><body class="jquery-ajax-load">' . $content . '</body></html>';

  //print $content;
  print $page_callback_result;

  // Perform end-of-request tasks.
  //drupal_page_footer();
}
/**
 * Implementation of hook_theme().
 */
/*
 function mdn_theme($existing, $type, $theme, $path) {
  return array(
    'mdn' => array(
      'variables' => array(),
    ),
  ); // not sure if variables is correct or not, need to read about theming
}


function theme_mdn() {
  return "<div id='mdn'><noscript>Enable JavaScript to see this awesome graph.</noscript></div>";
}
*/